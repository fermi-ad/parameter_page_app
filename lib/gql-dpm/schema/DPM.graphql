scalar Timestamp

type StatusReply {
    status: Int!
}

type ScalarArray {
    scalarArrayValue: [Float]!
}

type TextArray {
    textArrayValue: [String]!
}

type Scalar {
    scalarValue: Float
}

type Raw {
    rawValue: String
}

type Text {
    textValue: String
}

union DataType =
      StatusReply # set when a fatal error occurs
    | Scalar
    | ScalarArray
    | Raw
    | Text
    | TextArray
    | StructData

type StructData {
    key: String
    structValue: DataType
}

type DataInfo {
    timestamp: Timestamp!
    result: DataType!
    di: Int!
    name: String!
    description: String!
    units: String
}

type DataReply {
    refId: Int!
    cycle: Int!
    data: DataInfo!
}

type DeviceProperty {
    primaryUnits: String
    commonUnits: String
}

type DeviceInfo {
    description: String!
    reading: DeviceProperty
    setting: DeviceProperty
}

type ErrorReply {
    message: String!
}

union DeviceInfoResult =
      DeviceInfo
    | ErrorReply

type DeviceInfoReply {
    result: [DeviceInfoResult!]!
}

type Query {
    acceleratorData(drfs: [String!]!): [DataReply!]!
    deviceInfo(device: [String!]!): DeviceInfoReply!
}

type Subscription {
    # Replies come through the same stream so DataReply is not an array
    acceleratorData(drfs: [String!]!): DataReply!
}
